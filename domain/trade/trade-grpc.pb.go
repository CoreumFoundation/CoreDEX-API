// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: domain/trade/trade-grpc.proto

package trade

import (
	denom "github.com/CoreumFoundation/CoreDEX-API/domain/denom"
	metadata "github.com/CoreumFoundation/CoreDEX-API/domain/metadata"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network  metadata.Network `protobuf:"varint,1,opt,name=Network,proto3,enum=metadata.Network" json:"Network,omitempty"`
	TXID     string           `protobuf:"bytes,2,opt,name=TXID,proto3" json:"TXID,omitempty"`
	Sequence int64            `protobuf:"varint,3,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_trade_trade_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_domain_trade_trade_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_domain_trade_trade_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *ID) GetNetwork() metadata.Network {
	if x != nil {
		return x.Network
	}
	return metadata.Network(0)
}

func (x *ID) GetTXID() string {
	if x != nil {
		return x.TXID
	}
	return ""
}

func (x *ID) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// Ability to get all trade history views using the filter options
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network  metadata.Network       `protobuf:"varint,1,opt,name=Network,proto3,enum=metadata.Network" json:"Network,omitempty"`
	From     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=From,proto3,oneof" json:"From,omitempty"`
	To       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=To,proto3,oneof" json:"To,omitempty"`
	Account  *string                `protobuf:"bytes,4,opt,name=Account,proto3,oneof" json:"Account,omitempty"`
	Sequence *int64                 `protobuf:"varint,5,opt,name=Sequence,proto3,oneof" json:"Sequence,omitempty"`
	OrderID  *string                `protobuf:"bytes,6,opt,name=OrderID,proto3,oneof" json:"OrderID,omitempty"`
	TXID     *string                `protobuf:"bytes,7,opt,name=TXID,proto3,oneof" json:"TXID,omitempty"`
	Denom1   *denom.Denom           `protobuf:"bytes,8,opt,name=Denom1,proto3,oneof" json:"Denom1,omitempty"`
	Denom2   *denom.Denom           `protobuf:"bytes,9,opt,name=Denom2,proto3,oneof" json:"Denom2,omitempty"`
	Offset   *int64                 `protobuf:"varint,10,opt,name=Offset,proto3,oneof" json:"Offset,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_trade_trade_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_domain_trade_trade_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_domain_trade_trade_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *Filter) GetNetwork() metadata.Network {
	if x != nil {
		return x.Network
	}
	return metadata.Network(0)
}

func (x *Filter) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Filter) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Filter) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Filter) GetSequence() int64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *Filter) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *Filter) GetTXID() string {
	if x != nil && x.TXID != nil {
		return *x.TXID
	}
	return ""
}

func (x *Filter) GetDenom1() *denom.Denom {
	if x != nil {
		return x.Denom1
	}
	return nil
}

func (x *Filter) GetDenom2() *denom.Denom {
	if x != nil {
		return x.Denom2
	}
	return nil
}

func (x *Filter) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type TradePairFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network metadata.Network `protobuf:"varint,1,opt,name=Network,proto3,enum=metadata.Network" json:"Network,omitempty"`
	Denom1  *denom.Denom     `protobuf:"bytes,2,opt,name=Denom1,proto3,oneof" json:"Denom1,omitempty"`
	Denom2  *denom.Denom     `protobuf:"bytes,3,opt,name=Denom2,proto3,oneof" json:"Denom2,omitempty"`
	Offset  *int64           `protobuf:"varint,4,opt,name=Offset,proto3,oneof" json:"Offset,omitempty"`
}

func (x *TradePairFilter) Reset() {
	*x = TradePairFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_trade_trade_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePairFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePairFilter) ProtoMessage() {}

func (x *TradePairFilter) ProtoReflect() protoreflect.Message {
	mi := &file_domain_trade_trade_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePairFilter.ProtoReflect.Descriptor instead.
func (*TradePairFilter) Descriptor() ([]byte, []int) {
	return file_domain_trade_trade_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *TradePairFilter) GetNetwork() metadata.Network {
	if x != nil {
		return x.Network
	}
	return metadata.Network(0)
}

func (x *TradePairFilter) GetDenom1() *denom.Denom {
	if x != nil {
		return x.Denom1
	}
	return nil
}

func (x *TradePairFilter) GetDenom2() *denom.Denom {
	if x != nil {
		return x.Denom2
	}
	return nil
}

func (x *TradePairFilter) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

var File_domain_trade_trade_grpc_proto protoreflect.FileDescriptor

var file_domain_trade_trade_grpc_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x58, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x58, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x33, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x02, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x58, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x54, 0x58, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x06, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x48,
	0x06, 0x52, 0x06, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x31, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06,
	0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x48, 0x07, 0x52, 0x06, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x54, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x58,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x31, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x2e, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x06, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x48, 0x01, 0x52,
	0x06, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x32, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x82, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x09, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x0c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x0d, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x0d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0d,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x00, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x72, 0x65,
	0x75, 0x6d, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x72,
	0x65, 0x44, 0x45, 0x58, 0x2d, 0x41, 0x50, 0x49, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_domain_trade_trade_grpc_proto_rawDescOnce sync.Once
	file_domain_trade_trade_grpc_proto_rawDescData = file_domain_trade_trade_grpc_proto_rawDesc
)

func file_domain_trade_trade_grpc_proto_rawDescGZIP() []byte {
	file_domain_trade_trade_grpc_proto_rawDescOnce.Do(func() {
		file_domain_trade_trade_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_domain_trade_trade_grpc_proto_rawDescData)
	})
	return file_domain_trade_trade_grpc_proto_rawDescData
}

var file_domain_trade_trade_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_domain_trade_trade_grpc_proto_goTypes = []interface{}{
	(*ID)(nil),                    // 0: trade.ID
	(*Filter)(nil),                // 1: trade.Filter
	(*TradePairFilter)(nil),       // 2: trade.TradePairFilter
	(metadata.Network)(0),         // 3: metadata.Network
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*denom.Denom)(nil),           // 5: denom.Denom
	(*Trade)(nil),                 // 6: trade.Trade
	(*Trades)(nil),                // 7: trade.Trades
	(*emptypb.Empty)(nil),         // 8: google.protobuf.Empty
	(*TradePairs)(nil),            // 9: trade.TradePairs
}
var file_domain_trade_trade_grpc_proto_depIdxs = []int32{
	3,  // 0: trade.ID.Network:type_name -> metadata.Network
	3,  // 1: trade.Filter.Network:type_name -> metadata.Network
	4,  // 2: trade.Filter.From:type_name -> google.protobuf.Timestamp
	4,  // 3: trade.Filter.To:type_name -> google.protobuf.Timestamp
	5,  // 4: trade.Filter.Denom1:type_name -> denom.Denom
	5,  // 5: trade.Filter.Denom2:type_name -> denom.Denom
	3,  // 6: trade.TradePairFilter.Network:type_name -> metadata.Network
	5,  // 7: trade.TradePairFilter.Denom1:type_name -> denom.Denom
	5,  // 8: trade.TradePairFilter.Denom2:type_name -> denom.Denom
	0,  // 9: trade.TradeService.Get:input_type -> trade.ID
	6,  // 10: trade.TradeService.Upsert:input_type -> trade.Trade
	7,  // 11: trade.TradeService.BatchUpsert:input_type -> trade.Trades
	1,  // 12: trade.TradeService.GetAll:input_type -> trade.Filter
	2,  // 13: trade.TradeService.GetTradePairs:input_type -> trade.TradePairFilter
	6,  // 14: trade.TradeService.Get:output_type -> trade.Trade
	8,  // 15: trade.TradeService.Upsert:output_type -> google.protobuf.Empty
	8,  // 16: trade.TradeService.BatchUpsert:output_type -> google.protobuf.Empty
	7,  // 17: trade.TradeService.GetAll:output_type -> trade.Trades
	9,  // 18: trade.TradeService.GetTradePairs:output_type -> trade.TradePairs
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_domain_trade_trade_grpc_proto_init() }
func file_domain_trade_trade_grpc_proto_init() {
	if File_domain_trade_trade_grpc_proto != nil {
		return
	}
	file_domain_trade_trade_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_domain_trade_trade_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_trade_trade_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_trade_trade_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePairFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_domain_trade_trade_grpc_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_domain_trade_trade_grpc_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_domain_trade_trade_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_domain_trade_trade_grpc_proto_goTypes,
		DependencyIndexes: file_domain_trade_trade_grpc_proto_depIdxs,
		MessageInfos:      file_domain_trade_trade_grpc_proto_msgTypes,
	}.Build()
	File_domain_trade_trade_grpc_proto = out.File
	file_domain_trade_trade_grpc_proto_rawDesc = nil
	file_domain_trade_trade_grpc_proto_goTypes = nil
	file_domain_trade_trade_grpc_proto_depIdxs = nil
}
