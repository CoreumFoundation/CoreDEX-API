// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: domain/trade/trade-grpc.proto

package trade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeServiceClient is the client API for TradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeServiceClient interface {
	// Get a single trade
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Trade, error)
	Upsert(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BatchUpsert(ctx context.Context, in *Trades, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Trades, error)
	GetTradePairs(ctx context.Context, in *TradePairFilter, opts ...grpc.CallOption) (*TradePairs, error)
}

type tradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceClient(cc grpc.ClientConnInterface) TradeServiceClient {
	return &tradeServiceClient{cc}
}

func (c *tradeServiceClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Trade, error) {
	out := new(Trade)
	err := c.cc.Invoke(ctx, "/trade.TradeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) Upsert(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/trade.TradeService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) BatchUpsert(ctx context.Context, in *Trades, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/trade.TradeService/BatchUpsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Trades, error) {
	out := new(Trades)
	err := c.cc.Invoke(ctx, "/trade.TradeService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) GetTradePairs(ctx context.Context, in *TradePairFilter, opts ...grpc.CallOption) (*TradePairs, error) {
	out := new(TradePairs)
	err := c.cc.Invoke(ctx, "/trade.TradeService/GetTradePairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeServiceServer is the server API for TradeService service.
// All implementations should embed UnimplementedTradeServiceServer
// for forward compatibility
type TradeServiceServer interface {
	// Get a single trade
	Get(context.Context, *ID) (*Trade, error)
	Upsert(context.Context, *Trade) (*emptypb.Empty, error)
	BatchUpsert(context.Context, *Trades) (*emptypb.Empty, error)
	GetAll(context.Context, *Filter) (*Trades, error)
	GetTradePairs(context.Context, *TradePairFilter) (*TradePairs, error)
}

// UnimplementedTradeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTradeServiceServer struct {
}

func (UnimplementedTradeServiceServer) Get(context.Context, *ID) (*Trade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTradeServiceServer) Upsert(context.Context, *Trade) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedTradeServiceServer) BatchUpsert(context.Context, *Trades) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsert not implemented")
}
func (UnimplementedTradeServiceServer) GetAll(context.Context, *Filter) (*Trades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTradeServiceServer) GetTradePairs(context.Context, *TradePairFilter) (*TradePairs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradePairs not implemented")
}

// UnsafeTradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceServer will
// result in compilation errors.
type UnsafeTradeServiceServer interface {
	mustEmbedUnimplementedTradeServiceServer()
}

func RegisterTradeServiceServer(s grpc.ServiceRegistrar, srv TradeServiceServer) {
	s.RegisterService(&TradeService_ServiceDesc, srv)
}

func _TradeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trade.TradeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trade.TradeService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).Upsert(ctx, req.(*Trade))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_BatchUpsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trades)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).BatchUpsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trade.TradeService/BatchUpsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).BatchUpsert(ctx, req.(*Trades))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trade.TradeService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).GetAll(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_GetTradePairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradePairFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).GetTradePairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trade.TradeService/GetTradePairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).GetTradePairs(ctx, req.(*TradePairFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeService_ServiceDesc is the grpc.ServiceDesc for TradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trade.TradeService",
	HandlerType: (*TradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TradeService_Get_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _TradeService_Upsert_Handler,
		},
		{
			MethodName: "BatchUpsert",
			Handler:    _TradeService_BatchUpsert_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TradeService_GetAll_Handler,
		},
		{
			MethodName: "GetTradePairs",
			Handler:    _TradeService_GetTradePairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/trade/trade-grpc.proto",
}
