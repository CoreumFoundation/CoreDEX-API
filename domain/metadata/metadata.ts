// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: domain/metadata/metadata.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "metadata";

export enum Network {
  /** NETWORK_DO_NOT_USE - Avoid a default value since a default and a bug are not distinguishable */
  NETWORK_DO_NOT_USE = 0,
  MAINNET = 1,
  TESTNET = 2,
  DEVNET = 3,
  UNRECOGNIZED = -1,
}

export function networkFromJSON(object: any): Network {
  switch (object) {
    case 0:
    case "NETWORK_DO_NOT_USE":
      return Network.NETWORK_DO_NOT_USE;
    case 1:
    case "MAINNET":
      return Network.MAINNET;
    case 2:
    case "TESTNET":
      return Network.TESTNET;
    case 3:
    case "DEVNET":
      return Network.DEVNET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Network.UNRECOGNIZED;
  }
}

export function networkToJSON(object: Network): string {
  switch (object) {
    case Network.NETWORK_DO_NOT_USE:
      return "NETWORK_DO_NOT_USE";
    case Network.MAINNET:
      return "MAINNET";
    case Network.TESTNET:
      return "TESTNET";
    case Network.DEVNET:
      return "DEVNET";
    case Network.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MetaData {
  /** mainnet, testnet, devnet, can also be some virtually defined network (extra devnet for testing, extra mainnnet node for scanning historical blocks, etc) */
  Network: Network;
  UpdatedAt: Date | undefined;
  CreatedAt: Date | undefined;
}

function createBaseMetaData(): MetaData {
  return { Network: 0, UpdatedAt: undefined, CreatedAt: undefined };
}

export const MetaData = {
  encode(message: MetaData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Network !== 0) {
      writer.uint32(8).int32(message.Network);
    }
    if (message.UpdatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.UpdatedAt), writer.uint32(18).fork()).ldelim();
    }
    if (message.CreatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.CreatedAt), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MetaData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetaData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.Network = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.UpdatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.CreatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetaData {
    return {
      Network: isSet(object.Network) ? networkFromJSON(object.Network) : 0,
      UpdatedAt: isSet(object.UpdatedAt) ? fromJsonTimestamp(object.UpdatedAt) : undefined,
      CreatedAt: isSet(object.CreatedAt) ? fromJsonTimestamp(object.CreatedAt) : undefined,
    };
  },

  toJSON(message: MetaData): unknown {
    const obj: any = {};
    if (message.Network !== 0) {
      obj.Network = networkToJSON(message.Network);
    }
    if (message.UpdatedAt !== undefined) {
      obj.UpdatedAt = message.UpdatedAt.toISOString();
    }
    if (message.CreatedAt !== undefined) {
      obj.CreatedAt = message.CreatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetaData>, I>>(base?: I): MetaData {
    return MetaData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetaData>, I>>(object: I): MetaData {
    const message = createBaseMetaData();
    message.Network = object.Network ?? 0;
    message.UpdatedAt = object.UpdatedAt ?? undefined;
    message.CreatedAt = object.CreatedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
