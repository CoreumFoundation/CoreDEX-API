// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: domain/ohlc/ohlc.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { MetaData } from "../metadata/metadata";

export const protobufPackage = "ohlc";

export enum PeriodType {
  PERIOD_TYPE_DO_NOT_USE = 0,
  PERIOD_TYPE_MINUTE = 1,
  PERIOD_TYPE_HOUR = 2,
  PERIOD_TYPE_DAY = 3,
  PERIOD_TYPE_WEEK = 4,
  UNRECOGNIZED = -1,
}

export function periodTypeFromJSON(object: any): PeriodType {
  switch (object) {
    case 0:
    case "PERIOD_TYPE_DO_NOT_USE":
      return PeriodType.PERIOD_TYPE_DO_NOT_USE;
    case 1:
    case "PERIOD_TYPE_MINUTE":
      return PeriodType.PERIOD_TYPE_MINUTE;
    case 2:
    case "PERIOD_TYPE_HOUR":
      return PeriodType.PERIOD_TYPE_HOUR;
    case 3:
    case "PERIOD_TYPE_DAY":
      return PeriodType.PERIOD_TYPE_DAY;
    case 4:
    case "PERIOD_TYPE_WEEK":
      return PeriodType.PERIOD_TYPE_WEEK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PeriodType.UNRECOGNIZED;
  }
}

export function periodTypeToJSON(object: PeriodType): string {
  switch (object) {
    case PeriodType.PERIOD_TYPE_DO_NOT_USE:
      return "PERIOD_TYPE_DO_NOT_USE";
    case PeriodType.PERIOD_TYPE_MINUTE:
      return "PERIOD_TYPE_MINUTE";
    case PeriodType.PERIOD_TYPE_HOUR:
      return "PERIOD_TYPE_HOUR";
    case PeriodType.PERIOD_TYPE_DAY:
      return "PERIOD_TYPE_DAY";
    case PeriodType.PERIOD_TYPE_WEEK:
      return "PERIOD_TYPE_WEEK";
    case PeriodType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface OHLCs {
  OHLCs: OHLC[];
}

export interface OHLC {
  Symbol: string;
  Timestamp: Date | undefined;
  Open: number;
  High: number;
  Low: number;
  Close: number;
  Volume: number;
  NumberOfTrades: number;
  Period: Period | undefined;
  USDValue?: number | undefined;
  QuoteVolume: number;
  MetaData:
    | MetaData
    | undefined;
  /** When was the open time record created: Used for out of order trade processing */
  OpenTime:
    | Date
    | undefined;
  /** When was the close time record created: Used for out of order trade processing */
  CloseTime: Date | undefined;
}

export interface Period {
  PeriodType: PeriodType;
  /** The duration of the indicated period (e.g 1 minute, 3 minutes, etc) */
  Duration: number;
}

function createBaseOHLCs(): OHLCs {
  return { OHLCs: [] };
}

export const OHLCs = {
  encode(message: OHLCs, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.OHLCs) {
      OHLC.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OHLCs {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOHLCs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.OHLCs.push(OHLC.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OHLCs {
    return { OHLCs: globalThis.Array.isArray(object?.OHLCs) ? object.OHLCs.map((e: any) => OHLC.fromJSON(e)) : [] };
  },

  toJSON(message: OHLCs): unknown {
    const obj: any = {};
    if (message.OHLCs?.length) {
      obj.OHLCs = message.OHLCs.map((e) => OHLC.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OHLCs>, I>>(base?: I): OHLCs {
    return OHLCs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OHLCs>, I>>(object: I): OHLCs {
    const message = createBaseOHLCs();
    message.OHLCs = object.OHLCs?.map((e) => OHLC.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOHLC(): OHLC {
  return {
    Symbol: "",
    Timestamp: undefined,
    Open: 0,
    High: 0,
    Low: 0,
    Close: 0,
    Volume: 0,
    NumberOfTrades: 0,
    Period: undefined,
    USDValue: undefined,
    QuoteVolume: 0,
    MetaData: undefined,
    OpenTime: undefined,
    CloseTime: undefined,
  };
}

export const OHLC = {
  encode(message: OHLC, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Symbol !== "") {
      writer.uint32(10).string(message.Symbol);
    }
    if (message.Timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.Timestamp), writer.uint32(18).fork()).ldelim();
    }
    if (message.Open !== 0) {
      writer.uint32(25).double(message.Open);
    }
    if (message.High !== 0) {
      writer.uint32(33).double(message.High);
    }
    if (message.Low !== 0) {
      writer.uint32(41).double(message.Low);
    }
    if (message.Close !== 0) {
      writer.uint32(49).double(message.Close);
    }
    if (message.Volume !== 0) {
      writer.uint32(57).double(message.Volume);
    }
    if (message.NumberOfTrades !== 0) {
      writer.uint32(64).int64(message.NumberOfTrades);
    }
    if (message.Period !== undefined) {
      Period.encode(message.Period, writer.uint32(74).fork()).ldelim();
    }
    if (message.USDValue !== undefined) {
      writer.uint32(81).double(message.USDValue);
    }
    if (message.QuoteVolume !== 0) {
      writer.uint32(89).double(message.QuoteVolume);
    }
    if (message.MetaData !== undefined) {
      MetaData.encode(message.MetaData, writer.uint32(162).fork()).ldelim();
    }
    if (message.OpenTime !== undefined) {
      Timestamp.encode(toTimestamp(message.OpenTime), writer.uint32(170).fork()).ldelim();
    }
    if (message.CloseTime !== undefined) {
      Timestamp.encode(toTimestamp(message.CloseTime), writer.uint32(178).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OHLC {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOHLC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Symbol = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.Open = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.High = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.Low = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.Close = reader.double();
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.Volume = reader.double();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.NumberOfTrades = longToNumber(reader.int64() as Long);
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.Period = Period.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.USDValue = reader.double();
          continue;
        case 11:
          if (tag !== 89) {
            break;
          }

          message.QuoteVolume = reader.double();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.MetaData = MetaData.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.OpenTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.CloseTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OHLC {
    return {
      Symbol: isSet(object.Symbol) ? globalThis.String(object.Symbol) : "",
      Timestamp: isSet(object.Timestamp) ? fromJsonTimestamp(object.Timestamp) : undefined,
      Open: isSet(object.Open) ? globalThis.Number(object.Open) : 0,
      High: isSet(object.High) ? globalThis.Number(object.High) : 0,
      Low: isSet(object.Low) ? globalThis.Number(object.Low) : 0,
      Close: isSet(object.Close) ? globalThis.Number(object.Close) : 0,
      Volume: isSet(object.Volume) ? globalThis.Number(object.Volume) : 0,
      NumberOfTrades: isSet(object.NumberOfTrades) ? globalThis.Number(object.NumberOfTrades) : 0,
      Period: isSet(object.Period) ? Period.fromJSON(object.Period) : undefined,
      USDValue: isSet(object.USDValue) ? globalThis.Number(object.USDValue) : undefined,
      QuoteVolume: isSet(object.QuoteVolume) ? globalThis.Number(object.QuoteVolume) : 0,
      MetaData: isSet(object.MetaData) ? MetaData.fromJSON(object.MetaData) : undefined,
      OpenTime: isSet(object.OpenTime) ? fromJsonTimestamp(object.OpenTime) : undefined,
      CloseTime: isSet(object.CloseTime) ? fromJsonTimestamp(object.CloseTime) : undefined,
    };
  },

  toJSON(message: OHLC): unknown {
    const obj: any = {};
    if (message.Symbol !== "") {
      obj.Symbol = message.Symbol;
    }
    if (message.Timestamp !== undefined) {
      obj.Timestamp = message.Timestamp.toISOString();
    }
    if (message.Open !== 0) {
      obj.Open = message.Open;
    }
    if (message.High !== 0) {
      obj.High = message.High;
    }
    if (message.Low !== 0) {
      obj.Low = message.Low;
    }
    if (message.Close !== 0) {
      obj.Close = message.Close;
    }
    if (message.Volume !== 0) {
      obj.Volume = message.Volume;
    }
    if (message.NumberOfTrades !== 0) {
      obj.NumberOfTrades = Math.round(message.NumberOfTrades);
    }
    if (message.Period !== undefined) {
      obj.Period = Period.toJSON(message.Period);
    }
    if (message.USDValue !== undefined) {
      obj.USDValue = message.USDValue;
    }
    if (message.QuoteVolume !== 0) {
      obj.QuoteVolume = message.QuoteVolume;
    }
    if (message.MetaData !== undefined) {
      obj.MetaData = MetaData.toJSON(message.MetaData);
    }
    if (message.OpenTime !== undefined) {
      obj.OpenTime = message.OpenTime.toISOString();
    }
    if (message.CloseTime !== undefined) {
      obj.CloseTime = message.CloseTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OHLC>, I>>(base?: I): OHLC {
    return OHLC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OHLC>, I>>(object: I): OHLC {
    const message = createBaseOHLC();
    message.Symbol = object.Symbol ?? "";
    message.Timestamp = object.Timestamp ?? undefined;
    message.Open = object.Open ?? 0;
    message.High = object.High ?? 0;
    message.Low = object.Low ?? 0;
    message.Close = object.Close ?? 0;
    message.Volume = object.Volume ?? 0;
    message.NumberOfTrades = object.NumberOfTrades ?? 0;
    message.Period = (object.Period !== undefined && object.Period !== null)
      ? Period.fromPartial(object.Period)
      : undefined;
    message.USDValue = object.USDValue ?? undefined;
    message.QuoteVolume = object.QuoteVolume ?? 0;
    message.MetaData = (object.MetaData !== undefined && object.MetaData !== null)
      ? MetaData.fromPartial(object.MetaData)
      : undefined;
    message.OpenTime = object.OpenTime ?? undefined;
    message.CloseTime = object.CloseTime ?? undefined;
    return message;
  },
};

function createBasePeriod(): Period {
  return { PeriodType: 0, Duration: 0 };
}

export const Period = {
  encode(message: Period, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.PeriodType !== 0) {
      writer.uint32(8).int32(message.PeriodType);
    }
    if (message.Duration !== 0) {
      writer.uint32(16).int32(message.Duration);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Period {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeriod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.PeriodType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Duration = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Period {
    return {
      PeriodType: isSet(object.PeriodType) ? periodTypeFromJSON(object.PeriodType) : 0,
      Duration: isSet(object.Duration) ? globalThis.Number(object.Duration) : 0,
    };
  },

  toJSON(message: Period): unknown {
    const obj: any = {};
    if (message.PeriodType !== 0) {
      obj.PeriodType = periodTypeToJSON(message.PeriodType);
    }
    if (message.Duration !== 0) {
      obj.Duration = Math.round(message.Duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Period>, I>>(base?: I): Period {
    return Period.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Period>, I>>(object: I): Period {
    const message = createBasePeriod();
    message.PeriodType = object.PeriodType ?? 0;
    message.Duration = object.Duration ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
