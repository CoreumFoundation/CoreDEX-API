// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: domain/ohlc/ohlc-grpc.proto

package ohlc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OHLCServiceClient is the client API for OHLCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OHLCServiceClient interface {
	// Store a single ohlc
	Upsert(ctx context.Context, in *OHLC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Store multiple ohlcs
	BatchUpsert(ctx context.Context, in *OHLCs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get a list of ohlc by from/to, token pair, period and network
	Get(ctx context.Context, in *OHLCFilter, opts ...grpc.CallOption) (*OHLCs, error)
	// Get ohlcs for all the given periods
	GetOHLCsForPeriods(ctx context.Context, in *PeriodsFilter, opts ...grpc.CallOption) (*OHLCs, error)
}

type oHLCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOHLCServiceClient(cc grpc.ClientConnInterface) OHLCServiceClient {
	return &oHLCServiceClient{cc}
}

func (c *oHLCServiceClient) Upsert(ctx context.Context, in *OHLC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ohlc.OHLCService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCServiceClient) BatchUpsert(ctx context.Context, in *OHLCs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ohlc.OHLCService/BatchUpsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCServiceClient) Get(ctx context.Context, in *OHLCFilter, opts ...grpc.CallOption) (*OHLCs, error) {
	out := new(OHLCs)
	err := c.cc.Invoke(ctx, "/ohlc.OHLCService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCServiceClient) GetOHLCsForPeriods(ctx context.Context, in *PeriodsFilter, opts ...grpc.CallOption) (*OHLCs, error) {
	out := new(OHLCs)
	err := c.cc.Invoke(ctx, "/ohlc.OHLCService/GetOHLCsForPeriods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OHLCServiceServer is the server API for OHLCService service.
// All implementations should embed UnimplementedOHLCServiceServer
// for forward compatibility
type OHLCServiceServer interface {
	// Store a single ohlc
	Upsert(context.Context, *OHLC) (*emptypb.Empty, error)
	// Store multiple ohlcs
	BatchUpsert(context.Context, *OHLCs) (*emptypb.Empty, error)
	// Get a list of ohlc by from/to, token pair, period and network
	Get(context.Context, *OHLCFilter) (*OHLCs, error)
	// Get ohlcs for all the given periods
	GetOHLCsForPeriods(context.Context, *PeriodsFilter) (*OHLCs, error)
}

// UnimplementedOHLCServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOHLCServiceServer struct {
}

func (UnimplementedOHLCServiceServer) Upsert(context.Context, *OHLC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedOHLCServiceServer) BatchUpsert(context.Context, *OHLCs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsert not implemented")
}
func (UnimplementedOHLCServiceServer) Get(context.Context, *OHLCFilter) (*OHLCs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOHLCServiceServer) GetOHLCsForPeriods(context.Context, *PeriodsFilter) (*OHLCs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOHLCsForPeriods not implemented")
}

// UnsafeOHLCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OHLCServiceServer will
// result in compilation errors.
type UnsafeOHLCServiceServer interface {
	mustEmbedUnimplementedOHLCServiceServer()
}

func RegisterOHLCServiceServer(s grpc.ServiceRegistrar, srv OHLCServiceServer) {
	s.RegisterService(&OHLCService_ServiceDesc, srv)
}

func _OHLCService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OHLC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlc.OHLCService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServiceServer).Upsert(ctx, req.(*OHLC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLCService_BatchUpsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OHLCs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServiceServer).BatchUpsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlc.OHLCService/BatchUpsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServiceServer).BatchUpsert(ctx, req.(*OHLCs))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLCService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OHLCFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlc.OHLCService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServiceServer).Get(ctx, req.(*OHLCFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLCService_GetOHLCsForPeriods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServiceServer).GetOHLCsForPeriods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlc.OHLCService/GetOHLCsForPeriods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServiceServer).GetOHLCsForPeriods(ctx, req.(*PeriodsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// OHLCService_ServiceDesc is the grpc.ServiceDesc for OHLCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OHLCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ohlc.OHLCService",
	HandlerType: (*OHLCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _OHLCService_Upsert_Handler,
		},
		{
			MethodName: "BatchUpsert",
			Handler:    _OHLCService_BatchUpsert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OHLCService_Get_Handler,
		},
		{
			MethodName: "GetOHLCsForPeriods",
			Handler:    _OHLCService_GetOHLCsForPeriods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/ohlc/ohlc-grpc.proto",
}
