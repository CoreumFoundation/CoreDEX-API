// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.0
// source: domain/denom/denom.proto
/* eslint-disable */
import _m0 from "protobufjs/minimal";
export const protobufPackage = "denom";
function createBaseDenom() {
    return {
        Currency: "",
        Issuer: "",
        Precision: undefined,
        IsIBC: false,
        Denom: "",
        Name: undefined,
        Description: undefined,
        Icon: undefined,
    };
}
export const Denom = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.Currency !== "") {
            writer.uint32(10).string(message.Currency);
        }
        if (message.Issuer !== "") {
            writer.uint32(18).string(message.Issuer);
        }
        if (message.Precision !== undefined) {
            writer.uint32(24).int32(message.Precision);
        }
        if (message.IsIBC !== false) {
            writer.uint32(32).bool(message.IsIBC);
        }
        if (message.Denom !== "") {
            writer.uint32(42).string(message.Denom);
        }
        if (message.Name !== undefined) {
            writer.uint32(50).string(message.Name);
        }
        if (message.Description !== undefined) {
            writer.uint32(58).string(message.Description);
        }
        if (message.Icon !== undefined) {
            writer.uint32(66).string(message.Icon);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.Currency = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.Issuer = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.Precision = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.IsIBC = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.Denom = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.Name = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.Description = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.Icon = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Currency: isSet(object.Currency) ? globalThis.String(object.Currency) : "",
            Issuer: isSet(object.Issuer) ? globalThis.String(object.Issuer) : "",
            Precision: isSet(object.Precision) ? globalThis.Number(object.Precision) : undefined,
            IsIBC: isSet(object.IsIBC) ? globalThis.Boolean(object.IsIBC) : false,
            Denom: isSet(object.Denom) ? globalThis.String(object.Denom) : "",
            Name: isSet(object.Name) ? globalThis.String(object.Name) : undefined,
            Description: isSet(object.Description) ? globalThis.String(object.Description) : undefined,
            Icon: isSet(object.Icon) ? globalThis.String(object.Icon) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Currency !== "") {
            obj.Currency = message.Currency;
        }
        if (message.Issuer !== "") {
            obj.Issuer = message.Issuer;
        }
        if (message.Precision !== undefined) {
            obj.Precision = Math.round(message.Precision);
        }
        if (message.IsIBC !== false) {
            obj.IsIBC = message.IsIBC;
        }
        if (message.Denom !== "") {
            obj.Denom = message.Denom;
        }
        if (message.Name !== undefined) {
            obj.Name = message.Name;
        }
        if (message.Description !== undefined) {
            obj.Description = message.Description;
        }
        if (message.Icon !== undefined) {
            obj.Icon = message.Icon;
        }
        return obj;
    },
    create(base) {
        return Denom.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseDenom();
        message.Currency = (_a = object.Currency) !== null && _a !== void 0 ? _a : "";
        message.Issuer = (_b = object.Issuer) !== null && _b !== void 0 ? _b : "";
        message.Precision = (_c = object.Precision) !== null && _c !== void 0 ? _c : undefined;
        message.IsIBC = (_d = object.IsIBC) !== null && _d !== void 0 ? _d : false;
        message.Denom = (_e = object.Denom) !== null && _e !== void 0 ? _e : "";
        message.Name = (_f = object.Name) !== null && _f !== void 0 ? _f : undefined;
        message.Description = (_g = object.Description) !== null && _g !== void 0 ? _g : undefined;
        message.Icon = (_h = object.Icon) !== null && _h !== void 0 ? _h : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
