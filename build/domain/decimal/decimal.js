// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.0
// source: domain/decimal/decimal.proto
/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "decimal";
function createBaseDecimal() {
    return { Value: 0, Exp: 0 };
}
export const Decimal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.Value !== 0) {
            writer.uint32(8).int64(message.Value);
        }
        if (message.Exp !== 0) {
            writer.uint32(16).int32(message.Exp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecimal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.Value = longToNumber(reader.int64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.Exp = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Value: isSet(object.Value) ? globalThis.Number(object.Value) : 0,
            Exp: isSet(object.Exp) ? globalThis.Number(object.Exp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Value !== 0) {
            obj.Value = Math.round(message.Value);
        }
        if (message.Exp !== 0) {
            obj.Exp = Math.round(message.Exp);
        }
        return obj;
    },
    create(base) {
        return Decimal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDecimal();
        message.Value = (_a = object.Value) !== null && _a !== void 0 ? _a : 0;
        message.Exp = (_b = object.Exp) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
