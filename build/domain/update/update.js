// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: domain/update/update.proto
/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { networkFromJSON, networkToJSON } from "../metadata/metadata";
export const protobufPackage = "update";
export var Action;
(function (Action) {
    Action[Action["SUBSCRIBE"] = 0] = "SUBSCRIBE";
    Action[Action["UNSUBSCRIBE"] = 1] = "UNSUBSCRIBE";
    Action[Action["CLOSE"] = 2] = "CLOSE";
    Action[Action["RESPONSE"] = 3] = "RESPONSE";
    Action[Action["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Action || (Action = {}));
export function actionFromJSON(object) {
    switch (object) {
        case 0:
        case "SUBSCRIBE":
            return Action.SUBSCRIBE;
        case 1:
        case "UNSUBSCRIBE":
            return Action.UNSUBSCRIBE;
        case 2:
        case "CLOSE":
            return Action.CLOSE;
        case 3:
        case "RESPONSE":
            return Action.RESPONSE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Action.UNRECOGNIZED;
    }
}
export function actionToJSON(object) {
    switch (object) {
        case Action.SUBSCRIBE:
            return "SUBSCRIBE";
        case Action.UNSUBSCRIBE:
            return "UNSUBSCRIBE";
        case Action.CLOSE:
            return "CLOSE";
        case Action.RESPONSE:
            return "RESPONSE";
        case Action.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export var Method;
(function (Method) {
    Method[Method["METHOD_DO_NOT_USE"] = 0] = "METHOD_DO_NOT_USE";
    /** TRADES_FOR_SYMBOL - ID: {denom1}_{denom2} */
    Method[Method["TRADES_FOR_SYMBOL"] = 1] = "TRADES_FOR_SYMBOL";
    /** TRADES_FOR_ACCOUNT - ID: {account} */
    Method[Method["TRADES_FOR_ACCOUNT"] = 2] = "TRADES_FOR_ACCOUNT";
    /** TRADES_FOR_ACCOUNT_AND_SYMBOL - ID: {account}_{denom1}_{denom2} */
    Method[Method["TRADES_FOR_ACCOUNT_AND_SYMBOL"] = 3] = "TRADES_FOR_ACCOUNT_AND_SYMBOL";
    /** OHLC - ID: {denom1}_{denom2}_{interval} */
    Method[Method["OHLC"] = 4] = "OHLC";
    /** TICKER - ID: {denom1}_{denom2} */
    Method[Method["TICKER"] = 5] = "TICKER";
    /** ORDERBOOK - ID: {denom1}_{denom2} */
    Method[Method["ORDERBOOK"] = 6] = "ORDERBOOK";
    /** ORDERBOOK_FOR_SYMBOL_AND_ACCOUNT - ID: {account}_{denom1}_{denom2} */
    Method[Method["ORDERBOOK_FOR_SYMBOL_AND_ACCOUNT"] = 7] = "ORDERBOOK_FOR_SYMBOL_AND_ACCOUNT";
    /** WALLET - ID: {account} */
    Method[Method["WALLET"] = 8] = "WALLET";
    Method[Method["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Method || (Method = {}));
export function methodFromJSON(object) {
    switch (object) {
        case 0:
        case "METHOD_DO_NOT_USE":
            return Method.METHOD_DO_NOT_USE;
        case 1:
        case "TRADES_FOR_SYMBOL":
            return Method.TRADES_FOR_SYMBOL;
        case 2:
        case "TRADES_FOR_ACCOUNT":
            return Method.TRADES_FOR_ACCOUNT;
        case 3:
        case "TRADES_FOR_ACCOUNT_AND_SYMBOL":
            return Method.TRADES_FOR_ACCOUNT_AND_SYMBOL;
        case 4:
        case "OHLC":
            return Method.OHLC;
        case 5:
        case "TICKER":
            return Method.TICKER;
        case 6:
        case "ORDERBOOK":
            return Method.ORDERBOOK;
        case 7:
        case "ORDERBOOK_FOR_SYMBOL_AND_ACCOUNT":
            return Method.ORDERBOOK_FOR_SYMBOL_AND_ACCOUNT;
        case 8:
        case "WALLET":
            return Method.WALLET;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Method.UNRECOGNIZED;
    }
}
export function methodToJSON(object) {
    switch (object) {
        case Method.METHOD_DO_NOT_USE:
            return "METHOD_DO_NOT_USE";
        case Method.TRADES_FOR_SYMBOL:
            return "TRADES_FOR_SYMBOL";
        case Method.TRADES_FOR_ACCOUNT:
            return "TRADES_FOR_ACCOUNT";
        case Method.TRADES_FOR_ACCOUNT_AND_SYMBOL:
            return "TRADES_FOR_ACCOUNT_AND_SYMBOL";
        case Method.OHLC:
            return "OHLC";
        case Method.TICKER:
            return "TICKER";
        case Method.ORDERBOOK:
            return "ORDERBOOK";
        case Method.ORDERBOOK_FOR_SYMBOL_AND_ACCOUNT:
            return "ORDERBOOK_FOR_SYMBOL_AND_ACCOUNT";
        case Method.WALLET:
            return "WALLET";
        case Method.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseSubscribe() {
    return { Action: 0, Subscription: undefined };
}
export const Subscribe = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.Action !== 0) {
            writer.uint32(8).int32(message.Action);
        }
        if (message.Subscription !== undefined) {
            Subscription.encode(message.Subscription, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscribe();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.Action = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.Subscription = Subscription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Action: isSet(object.Action) ? actionFromJSON(object.Action) : 0,
            Subscription: isSet(object.Subscription) ? Subscription.fromJSON(object.Subscription) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Action !== 0) {
            obj.Action = actionToJSON(message.Action);
        }
        if (message.Subscription !== undefined) {
            obj.Subscription = Subscription.toJSON(message.Subscription);
        }
        return obj;
    },
    create(base) {
        return Subscribe.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSubscribe();
        message.Action = (_a = object.Action) !== null && _a !== void 0 ? _a : 0;
        message.Subscription = (object.Subscription !== undefined && object.Subscription !== null)
            ? Subscription.fromPartial(object.Subscription)
            : undefined;
        return message;
    },
};
function createBaseSubscription() {
    return { Method: 0, ID: "", Network: 0, Content: "" };
}
export const Subscription = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.Method !== 0) {
            writer.uint32(8).int32(message.Method);
        }
        if (message.ID !== "") {
            writer.uint32(18).string(message.ID);
        }
        if (message.Network !== 0) {
            writer.uint32(24).int32(message.Network);
        }
        if (message.Content !== "") {
            writer.uint32(34).string(message.Content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.Method = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.ID = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.Network = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.Content = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Method: isSet(object.Method) ? methodFromJSON(object.Method) : 0,
            ID: isSet(object.ID) ? globalThis.String(object.ID) : "",
            Network: isSet(object.Network) ? networkFromJSON(object.Network) : 0,
            Content: isSet(object.Content) ? globalThis.String(object.Content) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Method !== 0) {
            obj.Method = methodToJSON(message.Method);
        }
        if (message.ID !== "") {
            obj.ID = message.ID;
        }
        if (message.Network !== 0) {
            obj.Network = networkToJSON(message.Network);
        }
        if (message.Content !== "") {
            obj.Content = message.Content;
        }
        return obj;
    },
    create(base) {
        return Subscription.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseSubscription();
        message.Method = (_a = object.Method) !== null && _a !== void 0 ? _a : 0;
        message.ID = (_b = object.ID) !== null && _b !== void 0 ? _b : "";
        message.Network = (_c = object.Network) !== null && _c !== void 0 ? _c : 0;
        message.Content = (_d = object.Content) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
